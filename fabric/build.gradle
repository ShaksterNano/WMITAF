plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

archivesBaseName = "${rootProject.archives_base_name}-fabric-mc${rootProject.minecraft_version}"

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")

    common(project(path: ":common", configuration: "namedElements")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }

    implementation(include("com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras_version}"))
    annotationProcessor("com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras_version}")

    modApi("me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}")

    modCompileOnly("mcp.mobius.waila:wthit-api:fabric-${rootProject.wthit_version}")

    modCompileOnly("mcjty.theoneprobe:theoneprobe-fabric:1.18-${rootProject.the_one_probe_fabric_version}")

    // modRuntimeOnly("mcp.mobius.waila:wthit:fabric-${rootProject.wthit_version}")

    modRuntimeOnly("mcjty.theoneprobe:theoneprobe-fabric:1.18-${rootProject.the_one_probe_fabric_version}")
    modRuntimeOnly("curse.maven:top-plus-595092:${rootProject.the_one_probe_plus_fabric_id}")

    modRuntimeOnly("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    modRuntimeOnly("com.github.ShakterNano:Imperishable-Items-Fabric:mc${rootProject.minecraft_version}-${rootProject.imperishable_items_fabric_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
